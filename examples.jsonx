class JsonXLimit ext {

}
class JsonXSandbox {
   constuctor() {
      this._space = null;
      this._time = null;
   }
   get empty() { return (this._space != null && this._space <= 0) || (this._time != null && this._time <= 0)}
   useTime(required) {
      if (this._time != null) {
         if (this_time < required) {
            throw new JsonXTimeLimitExceeded();
         } else {
            this._time = this._time - required;
         }
      }
   }
   useSpace(required) {
      if (this._space != null) {
         if (this_space < required) {
            throw new JsonXSpaceLimitExceeded();
         } else {
            this._space = this._space- required;
         }
      }
   }
}

class JsonXValue {
   constructor(sandbox) {
      this._state = 0;
      this._value = null;
      this._sandbox = sandbox;
   }
   value() {
      switch(this._state) {
         case 0: {
            this._state = 1;
            this._value = this._evaluate();
            this._state = 2;
            return this._value;
         }
         case 1: {
            throw new JsonXCyclicValue();
         }
         case 2: {
            return this._value;
         }
      }
   }
   time() { return 1; }
   space() { return 0; }
   type() { return "null"; }
   evaluate() {
      this._sandbox.useTime(time());
      this._sandbox.useSpace(space());
      this._value = null;
   }
}

class JsonXValueLiteral extends JsonXValue {
   constructor(sandbox,literal) {
      super(sandbox);
      this._state = 2;
      this._value = literal;
   }
   type() {
      ... use type of literal
   }
}

class JsonXCall {
   constructor(sandbox,lambda,args) {
      super(sandbox);
      this._lambda = lambda;
      this._args = args;
   }
   time() {
      return this._lambda.time() + 
   }
}

class JsonXWrapper {
   construct(sandbox) {
      this._sandbox = sandbox;
      
      this._y = new JsonXLiteral(3);
      this._x = new JsonXExpression(this.)
      
   }

   get x() {
      return this._x.value
   }

}




      if (this._state == 2) {
         return this._value;
      }
   }
   evaluate(c) {
      switch(this._state) {
         case 0: {
            this._state = 1;
            this._value = this.evaluate
         }
      }
      if (this._state == 2) {
         return this._value;
      }


   }
}



std : (
   acos : x => std.acos(x)
   read : file => std.read(file)
   encrypt : { message : ? , key : ? } => ...
)

true
2*acos(0) // pi
read('aes.key') // data as binary blob
encrypt(), decrypt()





use(std)

b16('dead.beef')

int(b10('32'))
b16.decode('dead.beef')
b64.decode('peas.and.carrots')
int.decode('dead.beef')
uint()
int('32')
float('32')
byte_size('apple')
char_size('apple')
{ x : 3 , y : 7}.x





any

number.mantessa
number.base
number.exponent

integer : number { number.exponent => 0 }

number
|
+-integer
|
+-float
|
+-
array





blocks are copy-on-write ref-counted collection
bytes are a balanced tree of blocks
strings are utf8 wrappers around bytes
integers are 2's compliment wrappers around bytes
numbers are a triplet of integers (m*b**p)
collection is a map of keys ->  values


x.foo()

x : me.x
y : me.y 
ii' '
viii' '
x' '
xiv' '


.1
.1.2.3.5
0.1

[[1,3,]][0,1]

[x,y,z]
44.5 

json!?

{
   api :{}
   false : true
   "false" : .false 
   ":" : "false" ."false"
   defaults : { x : 3, y : 4, z : ..z },
   y : defaults.y + 1,
   y!!!! : 77"
   z : 44
} == 77

x[=]

base = (x : 3, y : 7, z : 33, 1, 2 , 3)

{

  x : "y" + .y
  y : .z + 1,
  z : 3,
  a.b.c : 3
  a : { b : { c : 3 }}
}

{
   api : (endpoint) => `https://api.com/${endpoint}`
   x : y,
   x? : 33,
   x???!!!! : 7,

}.x == 7

{
   use std
   x : 1,
   pi : 2*atan(1),

}